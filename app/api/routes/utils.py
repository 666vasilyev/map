import os
import aiofiles
import hashlib

from typing import List, Optional
from uuid import UUID
from fastapi import UploadFile, HTTPException, status

from app.schemas.tree import TreeResponse
from app.schemas.product import ProductResponse
from app.schemas.filter import FilterModel
from app.schemas.object import ObjectCoordinates, ObjectChainResponse, AllObjectChainResponse
from app.db.models import Category, Product, Object
from app.core.settings import settings
from app.repositories.object_repository import ObjectRepository


def map_all_category(category: Category) -> TreeResponse:

    products = [ProductResponse.model_validate(product.product) for product in category.products]

    return TreeResponse(
        id=category.id,
        name=category.name,
        objects=[map_all_category(child) for child in category.children] + products
        )

def apply_filters(products: List[Product], filters: FilterModel) -> List[Product]:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º.
    """
    def matches(product: Product) -> bool:
        return all([
            filters.name is None or (product.name and filters.name.lower() in product.name.lower()),
            filters.description is None or (product.description and filters.description.lower() in product.description.lower()),
            filters.image is None or (product.image and filters.image.lower() in product.image.lower()),
            filters.country is None or (product.country and filters.country.lower() in product.country.lower())
        ])

    return [product for product in products if matches(product)]


def map_category(category: Category, filters: Optional[FilterModel] = None) -> Optional[TreeResponse]:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    products = [assoc.product for assoc in category.products]
    if filters:
        products = apply_filters(products, filters)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –æ—Ç–≤–µ—Ç–Ω—É—é —Å—Ö–µ–º—É
    products_response = [ProductResponse.model_validate(product) for product in products]

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    children_response = [map_category(child, filters) for child in category.children]
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    children_response = [child for child in children_response if child is not None]

    # –ï—Å–ª–∏ —É —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –µ—ë
    if not products_response and not children_response:
        return None

    return TreeResponse(
        id=category.id,
        name=category.name,
        objects=children_response + products_response
    )

def collect_filtered_products(category: Category, filters: Optional[FilterModel] = None) -> List[ProductResponse]:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø—Ä–∏–º–µ–Ω—è—è —Ñ–∏–ª—å—Ç—Ä—ã.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = [assoc.product for assoc in category.products]

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if filters:
        products = apply_filters(products, filters)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –æ—Ç–≤–µ—Ç–Ω—É—é —Å—Ö–µ–º—É
    products_response = [ProductResponse.model_validate(product) for product in products]

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for child in category.children:
        products_response.extend(collect_filtered_products(child, filters))

    return products_response


def map_objects(objects: List[Object], product_id: UUID) -> AllObjectChainResponse:
    """
    –ú–∞–ø–ø–∏—Ç —Å–ø–∏—Å–æ–∫ SQLAlchemy –æ–±—ä–µ–∫—Ç–æ–≤ –≤ Pydantic –º–æ–¥–µ–ª–∏ ObjectResponse.

    :param objects: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ SQLAlchemy –º–æ–¥–µ–ª–∏ Object.
    :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Pydantic –º–æ–¥–µ–ª–∏ ObjectResponse.
    """
    mapped_objects = []

    for obj in objects:
        chains = []
        for chain in obj.chains_source:
            if chain.product_id == product_id:
                chains.append(
                    ObjectCoordinates(
                        id=chain.target_object.id,
                        x=chain.target_object.x,
                        y=chain.target_object.y,
                        chain_id=chain.id,
                        name=chain.target_object.name
                    )
                )
        mapped_object = ObjectChainResponse(
            x=obj.x,
            y=obj.y,
            id=obj.id,
            name=obj.name,
            icon=obj.icon,
            description=obj.description,
            chains=chains,
        )
        mapped_objects.append(mapped_object)

    return mapped_objects

async def file_checksum(file_path: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à-—Å—É–º–º—É (SHA256) —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏."""
    hash_sha256 = hashlib.sha256()
    async with aiofiles.open(file_path, "rb") as f:
        while chunk := await f.read(8192):
            hash_sha256.update(chunk)
    return hash_sha256.hexdigest()


async def upload_file_checksum(file: UploadFile) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à-—Å—É–º–º—É –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫."""
    hash_sha256 = hashlib.sha256()
    chunk = await file.read()
    hash_sha256.update(chunk)
    await file.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è
    return hash_sha256.hexdigest()

async def save_uploaded_files(object_id: int, files: List[UploadFile]) -> List[str]:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—ä–µ–∫—Ç–∞.

    –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å—É—Ñ—Ñ–∏–∫—Å (1), (2) –∏ —Ç.–¥.
    
    :param object_id: ID –æ–±—ä–µ–∫—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª—ã.
    :param files: –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    :return: –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """

    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    object_dir = os.path.join(settings.STORAGE_DIR, "objects", str(object_id), "files")
    os.makedirs(object_dir, exist_ok=True)

    saved_files = []
    for file in files:
        base_filename = file.filename
        file_path = os.path.join(object_dir, base_filename)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
        if os.path.exists(file_path):
            existing_checksum = await file_checksum(file_path)
            new_file_checksum = await upload_file_checksum(file)

            if existing_checksum == new_file_checksum:
                # üî¥ –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å –∏ –æ–Ω –∏–¥–µ–Ω—Ç–∏—á–µ–Ω - –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É

            name, ext = os.path.splitext(base_filename)
            counter = 1
            new_filename = f"{name}({counter}){ext}"
            file_path = os.path.join(object_dir, new_filename)
            while os.path.exists(file_path):
                counter += 1
                new_filename = f"{name}({counter}){ext}"
                file_path = os.path.join(object_dir, new_filename)
            base_filename = new_filename  # –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞

        try:
            async with aiofiles.open(file_path, "wb") as f:
                # –ß–∏—Ç–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                await f.write(await file.read())
        except Exception as e:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
                detail=f"Error saving file: {str(e)}"
            )
        
        saved_files.append(base_filename)

    return saved_files


async def attach_files_to_object(db, object: Object, files: List[UploadFile]):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param object: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ–±—ä–µ–∫—Ç–∞.
    :param files: –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    if files:
        saved_files = await save_uploaded_files(object.id, files)
        obj = await ObjectRepository(db).update_file_storage(object, saved_files)
    
    return obj


async def save_uploaded_image(object_id: int, file: UploadFile) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞.

    :param object_id: ID –æ–±—ä–µ–∫—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    :param file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
    :return: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
    """
    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    object_dir = os.path.join(settings.STORAGE_DIR, "objects", str(object_id))
    os.makedirs(object_dir, exist_ok=True)
    file_path = os.path.join(object_dir, "image.jpg")

    try:
        async with aiofiles.open(file_path, "wb") as f:
            await f.write(await file.read())
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
            detail=f"Error saving image: {str(e)}"
            )

    return file_path


async def attach_image_to_object(db, object: Object, file: UploadFile):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param object: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ–±—ä–µ–∫—Ç–∞.
    :param file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    await save_uploaded_image(object.id, file)
    obj = await ObjectRepository(db).update_image(object, True)
    return obj